// THIS FILE IS AUTO GENERATED. DO NOT EDIT

#include "steam_api_cwrap.h"


inline  void CSteamAPI_ISteamClient_SetLocalIPBinding( ISteamClient * self, const SteamIPAddress_t * unIP, unsigned short int usPort ){ return SteamAPI_ISteamClient_SetLocalIPBinding( self, *unIP, usPort ); };
inline  void CSteamAPI_ISteamMatchmakingPingResponse_ServerResponded( ISteamMatchmakingPingResponse * self, gameserveritem_t * server ){ return SteamAPI_ISteamMatchmakingPingResponse_ServerResponded( self, *server ); };
inline  EResult CSteamAPI_ISteamNetworkingMessages_SendMessageToUser( ISteamNetworkingMessages * self, const SteamNetworkingIdentity * identityRemote, const void * pubData, unsigned int cubData, int nSendFlags, int nRemoteChannel ){ return SteamAPI_ISteamNetworkingMessages_SendMessageToUser( self, *identityRemote, pubData, cubData, nSendFlags, nRemoteChannel ); };
inline  bool CSteamAPI_ISteamNetworkingMessages_AcceptSessionWithUser( ISteamNetworkingMessages * self, const SteamNetworkingIdentity * identityRemote ){ return SteamAPI_ISteamNetworkingMessages_AcceptSessionWithUser( self, *identityRemote ); };
inline  bool CSteamAPI_ISteamNetworkingMessages_CloseSessionWithUser( ISteamNetworkingMessages * self, const SteamNetworkingIdentity * identityRemote ){ return SteamAPI_ISteamNetworkingMessages_CloseSessionWithUser( self, *identityRemote ); };
inline  bool CSteamAPI_ISteamNetworkingMessages_CloseChannelWithUser( ISteamNetworkingMessages * self, const SteamNetworkingIdentity * identityRemote, int nLocalChannel ){ return SteamAPI_ISteamNetworkingMessages_CloseChannelWithUser( self, *identityRemote, nLocalChannel ); };
inline  ESteamNetworkingConnectionState CSteamAPI_ISteamNetworkingMessages_GetSessionConnectionInfo( ISteamNetworkingMessages * self, const SteamNetworkingIdentity * identityRemote, SteamNetConnectionInfo_t * pConnectionInfo, SteamNetConnectionRealTimeStatus_t * pQuickStatus ){ return SteamAPI_ISteamNetworkingMessages_GetSessionConnectionInfo( self, *identityRemote, pConnectionInfo, pQuickStatus ); };
inline  HSteamListenSocket CSteamAPI_ISteamNetworkingSockets_CreateListenSocketIP( ISteamNetworkingSockets * self, const SteamNetworkingIPAddr * localAddress, int nOptions, const SteamNetworkingConfigValue_t * pOptions ){ return SteamAPI_ISteamNetworkingSockets_CreateListenSocketIP( self, *localAddress, nOptions, pOptions ); };
inline  HSteamNetConnection CSteamAPI_ISteamNetworkingSockets_ConnectByIPAddress( ISteamNetworkingSockets * self, const SteamNetworkingIPAddr * address, int nOptions, const SteamNetworkingConfigValue_t * pOptions ){ return SteamAPI_ISteamNetworkingSockets_ConnectByIPAddress( self, *address, nOptions, pOptions ); };
inline  HSteamNetConnection CSteamAPI_ISteamNetworkingSockets_ConnectP2P( ISteamNetworkingSockets * self, const SteamNetworkingIdentity * identityRemote, int nRemoteVirtualPort, int nOptions, const SteamNetworkingConfigValue_t * pOptions ){ return SteamAPI_ISteamNetworkingSockets_ConnectP2P( self, *identityRemote, nRemoteVirtualPort, nOptions, pOptions ); };
inline  int CSteamAPI_ISteamNetworkingSockets_FindRelayAuthTicketForServer( ISteamNetworkingSockets * self, const SteamNetworkingIdentity * identityGameServer, int nRemoteVirtualPort, SteamDatagramRelayAuthTicket * pOutParsedTicket ){ return SteamAPI_ISteamNetworkingSockets_FindRelayAuthTicketForServer( self, *identityGameServer, nRemoteVirtualPort, pOutParsedTicket ); };
inline  HSteamNetConnection CSteamAPI_ISteamNetworkingSockets_ConnectToHostedDedicatedServer( ISteamNetworkingSockets * self, const SteamNetworkingIdentity * identityTarget, int nRemoteVirtualPort, int nOptions, const SteamNetworkingConfigValue_t * pOptions ){ return SteamAPI_ISteamNetworkingSockets_ConnectToHostedDedicatedServer( self, *identityTarget, nRemoteVirtualPort, nOptions, pOptions ); };
inline  bool CSteamAPI_ISteamNetworkingSockets_GetCertificateRequest( ISteamNetworkingSockets * self, int * pcbBlob, void * pBlob, SteamNetworkingErrMsg * errMsg ){ return SteamAPI_ISteamNetworkingSockets_GetCertificateRequest( self, pcbBlob, pBlob, *errMsg ); };
inline  bool CSteamAPI_ISteamNetworkingSockets_SetCertificate( ISteamNetworkingSockets * self, const void * pCertificate, int cbCertificate, SteamNetworkingErrMsg * errMsg ){ return SteamAPI_ISteamNetworkingSockets_SetCertificate( self, pCertificate, cbCertificate, *errMsg ); };
inline  float CSteamAPI_ISteamNetworkingUtils_GetLocalPingLocation( ISteamNetworkingUtils * self, SteamNetworkPingLocation_t * result ){ return SteamAPI_ISteamNetworkingUtils_GetLocalPingLocation( self, *result ); };
inline  int CSteamAPI_ISteamNetworkingUtils_EstimatePingTimeBetweenTwoLocations( ISteamNetworkingUtils * self, const SteamNetworkPingLocation_t * location1, const SteamNetworkPingLocation_t * location2 ){ return SteamAPI_ISteamNetworkingUtils_EstimatePingTimeBetweenTwoLocations( self, *location1, *location2 ); };
inline  int CSteamAPI_ISteamNetworkingUtils_EstimatePingTimeFromLocalHost( ISteamNetworkingUtils * self, const SteamNetworkPingLocation_t * remoteLocation ){ return SteamAPI_ISteamNetworkingUtils_EstimatePingTimeFromLocalHost( self, *remoteLocation ); };
inline  void CSteamAPI_ISteamNetworkingUtils_ConvertPingLocationToString( ISteamNetworkingUtils * self, const SteamNetworkPingLocation_t * location, char * pszBuf, int cchBufSize ){ return SteamAPI_ISteamNetworkingUtils_ConvertPingLocationToString( self, *location, pszBuf, cchBufSize ); };
inline  bool CSteamAPI_ISteamNetworkingUtils_ParsePingLocationString( ISteamNetworkingUtils * self, const char * pszString, SteamNetworkPingLocation_t * result ){ return SteamAPI_ISteamNetworkingUtils_ParsePingLocationString( self, pszString, *result ); };
inline  EResult CSteamAPI_ISteamNetworkingUtils_GetRealIdentityForFakeIP( ISteamNetworkingUtils * self, const SteamNetworkingIPAddr * fakeIP, SteamNetworkingIdentity * pOutRealIdentity ){ return SteamAPI_ISteamNetworkingUtils_GetRealIdentityForFakeIP( self, *fakeIP, pOutRealIdentity ); };
inline  bool CSteamAPI_ISteamNetworkingUtils_SetConfigValueStruct( ISteamNetworkingUtils * self, const SteamNetworkingConfigValue_t * opt, ESteamNetworkingConfigScope eScopeType, intptr_t scopeObj ){ return SteamAPI_ISteamNetworkingUtils_SetConfigValueStruct( self, *opt, eScopeType, scopeObj ); };
inline  void CSteamAPI_ISteamNetworkingUtils_SteamNetworkingIPAddr_ToString( ISteamNetworkingUtils * self, const SteamNetworkingIPAddr * addr, char * buf, unsigned int cbBuf, bool bWithPort ){ return SteamAPI_ISteamNetworkingUtils_SteamNetworkingIPAddr_ToString( self, *addr, buf, cbBuf, bWithPort ); };
inline  ESteamNetworkingFakeIPType CSteamAPI_ISteamNetworkingUtils_SteamNetworkingIPAddr_GetFakeIPType( ISteamNetworkingUtils * self, const SteamNetworkingIPAddr * addr ){ return SteamAPI_ISteamNetworkingUtils_SteamNetworkingIPAddr_GetFakeIPType( self, *addr ); };
inline  void CSteamAPI_ISteamNetworkingUtils_SteamNetworkingIdentity_ToString( ISteamNetworkingUtils * self, const SteamNetworkingIdentity * identity, char * buf, unsigned int cbBuf ){ return SteamAPI_ISteamNetworkingUtils_SteamNetworkingIdentity_ToString( self, *identity, buf, cbBuf ); };
inline  EResult CSteamAPI_ISteamNetworkingFakeUDPPort_SendMessageToFakeIP( ISteamNetworkingFakeUDPPort * self, const SteamNetworkingIPAddr * remoteAddress, const void * pData, unsigned int cbData, int nSendFlags ){ return SteamAPI_ISteamNetworkingFakeUDPPort_SendMessageToFakeIP( self, *remoteAddress, pData, cbData, nSendFlags ); };
inline  void CSteamAPI_ISteamNetworkingFakeUDPPort_ScheduleCleanup( ISteamNetworkingFakeUDPPort * self, const SteamNetworkingIPAddr * remoteAddress ){ return SteamAPI_ISteamNetworkingFakeUDPPort_ScheduleCleanup( self, *remoteAddress ); };
inline  bool CSteamAPI_servernetadr_t_IsLessThan( servernetadr_t * self, const servernetadr_t * netadr ){ return SteamAPI_servernetadr_t_IsLessThan( self, *netadr ); };
inline  void CSteamAPI_servernetadr_t_Assign( servernetadr_t * self, const servernetadr_t * that ){ return SteamAPI_servernetadr_t_Assign( self, *that ); };
inline  bool CSteamAPI_SteamNetworkingIPAddr_IsEqualTo( SteamNetworkingIPAddr * self, const SteamNetworkingIPAddr * x ){ return SteamAPI_SteamNetworkingIPAddr_IsEqualTo( self, *x ); };
inline  void CSteamAPI_SteamNetworkingIdentity_SetIPAddr( SteamNetworkingIdentity * self, const SteamNetworkingIPAddr * addr ){ return SteamAPI_SteamNetworkingIdentity_SetIPAddr( self, *addr ); };
inline  const uint8 * CSteamAPI_SteamNetworkingIdentity_GetGenericBytes( SteamNetworkingIdentity * self, int * cbLen ){ return SteamAPI_SteamNetworkingIdentity_GetGenericBytes( self, *cbLen ); };
inline  bool CSteamAPI_SteamNetworkingIdentity_IsEqualTo( SteamNetworkingIdentity * self, const SteamNetworkingIdentity * x ){ return SteamAPI_SteamNetworkingIdentity_IsEqualTo( self, *x ); };